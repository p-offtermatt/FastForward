#define NEXT(x) (x+1) % N

mtype = { marker }

chan m[N] = [0] of { mtype };
bool done[N];
bool sampled[N];

active [N] proctype p() {
    bool red;
    bool sent;
    bool received;
s:  done[_pid] = false;
    sampled[_pid] = false;
    red = false;
    sent = false;
    received = false;
    do
    :: !red ->
        if
        :: true ->
            red = true;
            sampled[_pid] = true;
        :: m[_pid] ? marker ->
            received = true;
            red = true;
            sampled[_pid] = true;
        fi
    :: red && !sent && !received ->
        if
        :: m[NEXT(_pid)] ! marker ->
            sent = true;
        :: m[_pid] ? marker ->
            received = true;
        fi
    :: red && !sent && received ->
        m[NEXT(_pid)] ! marker;
        sent = true;
    :: red && sent && !received ->
        m[_pid] ? marker;
        received = true;
    :: red && sent && received && !done[_pid] ->
        skip;
    :: red && received && sent && done[_pid] ->
        goto s;
    od
}

active proctype monitor() {
    int i = 0;
    do
    :: i < N && !sampled[i] -> skip;
    :: i < N && sampled[i] -> i++;
    :: i == N ->
progress:
        for (i in sampled) {
            sampled[i] = false;
        }
        for (i in done) {
            done[i] = true;
        }
        i = 0;
    od
}
