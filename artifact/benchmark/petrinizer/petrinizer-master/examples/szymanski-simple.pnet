/*
#Entry protocol
p1: flag[self] ← 1                    #Standing outside waiting room
p2: await(all flag[1..N] ∈ {0, 1, 2}) #Wait for open door
p3: flag[self] ← 3                    #Standing in doorway
p4: if any flag[1..N] = 1:            #Another process is waiting to enter
p5:   flag[self] ← 2                #Waiting for other processes to enter
p6:   await(any flag[1..N] = 4)     #Wait for a process to enter and close the door

p7: flag[self] ← 4                    #The door is closed
p8: await(all flag[1..self-1] ∈ {0, 1})   #Wait for everyone of lower ID to finish exit protocol

#Critical section
#...

#Exit protocol
p9: await(all flag[self+1..N] ∈ {0, 1, 4}) #Ensure everyone in the waiting room has
                                       #realized that the door is supposed to be closed
p10:flag[self] ← 0 #Leave. Reopen door if nobody is still in the waiting room
*/
petri net "Szymanski's algorithm" {
    places {
        p1 p2 p3 p4 p5 p6 p7 p8 p9 p10
        q1 q2 q3 q4 q5 q6 q7 q8 q9 q10
        flag1v0 flag1v1 flag1v2 flag1v3 flag1v4
        flag2v0 flag2v1 flag2v2 flag2v3 flag2v4
    }
    transitions {
        u1 u2 u3 u4 u7 u8 u9 u10 u11 u12 u13 u18 u19
        u20 u21 u26 u27 u30 u31
        v1 v2 v3 v4 v7 v8 v9 v10 v11 v12 v13 v18 v19
        v20 v21 v22 v26 v31
    }
    arcs {
        { p1  flag1v0 } -> u1  -> { p2  flag1v1 }

        { p2  flag2v0 } -> u2  -> { p3  flag2v0 }
        { p2  flag2v1 } -> u3  -> { p3  flag2v1 }
        { p2  flag2v2 } -> u4  -> { p3  flag2v2 }

        { p3  flag1v1 } -> u7  -> { p4  flag1v3 }

        { p4  flag2v0 } -> u8  -> { p7  flag2v0 }
        { p4  flag2v1 } -> u9  -> { p5  flag2v1 }
        { p4  flag2v2 } -> u10 -> { p7  flag2v2 }
        { p4  flag2v3 } -> u11 -> { p7  flag2v3 }
        { p4  flag2v4 } -> u12 -> { p7  flag2v4 }

        { p5  flag1v3 } -> u13 -> { p6  flag1v2 }

        { p6  flag2v4 } -> u18 -> { p7  flag2v4 }

        { p7  flag1v2 } -> u19 -> { p8  flag1v4 }
        { p7  flag1v3 } -> u20 -> { p8  flag1v4 }

        { p8          } -> u21 -> { p9          }

        { p9  flag2v0 } -> u26 -> { p10 flag2v0 }
        { p9  flag2v1 } -> u27 -> { p10 flag2v1 }
        { p9  flag2v4 } -> u30 -> { p10 flag2v4 }

        { p10 flag1v4 } -> u31 -> { p1  flag1v0 }


        { q1  flag2v0 } -> v1  -> { q2  flag2v1 }

        { q2  flag1v0 } -> v2  -> { q3  flag1v0 }
        { q2  flag1v1 } -> v3  -> { q3  flag1v1 }
        { q2  flag1v2 } -> v4  -> { q3  flag1v2 }

        { q3  flag2v1 } -> v7  -> { q4  flag2v3 }

        { q4  flag1v0 } -> v8  -> { q7  flag1v0 }
        { q4  flag1v1 } -> v9  -> { q5  flag1v1 }
        { q4  flag1v2 } -> v10 -> { q7  flag1v2 }
        { q4  flag1v3 } -> v11 -> { q7  flag1v3 }
        { q4  flag1v4 } -> v12 -> { q7  flag1v4 }

        { q5  flag2v3 } -> v13 -> { q6  flag2v2 }

        { q6  flag1v4 } -> v18 -> { q7  flag1v4 }

        { q7  flag2v2 } -> v19 -> { q8  flag2v4 }
        { q7  flag2v3 } -> v20 -> { q8  flag2v4 }

        { q8  flag1v0 } -> v21 -> { q9  flag1v0 }
        { q8  flag1v1 } -> v22 -> { q9  flag1v1 }

        { q9          } -> v26 -> { q10         }

        { q10 flag2v4 } -> v31 -> { q1  flag2v0 }
    }
    initial {
        p1 q1
        flag1v0
        flag2v0
    }
}
liveness property "fairness for first process" {
   u1 + u2 + u3 + u4 + u7 + u8 + u9 + u10 + u11 + u12 + u13 + u18 + u19 + u20 + u21 + u26 + u27 + u30 + u31 > 0 &&
   v1 + v2 + v3 + v4 + v7 + v8 + v9 + v10 + v11 + v12 + v13 + v18 + v19 + v20 + v21 + v22 + v26 + v31 > 0 &&
    u21 = 0
}
liveness property "fairness for second process" {
   u1 + u2 + u3 + u4 + u7 + u8 + u9 + u10 + u11 + u12 + u13 + u18 + u19 + u20 + u21 + u26 + u27 + u30 + u31 > 0 &&
   v1 + v2 + v3 + v4 + v7 + v8 + v9 + v10 + v11 + v12 + v13 + v18 + v19 + v20 + v21 + v22 + v26 + v31 > 0 &&
    v21 + v22 = 0
}
safety property "mutual exclusion" {
    p9 >= 1 && q9 >= 1
}
