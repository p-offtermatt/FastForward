petri net "asynchronous program" {
    places {
        // State
        x not_x x_ not_x_

        // Scheduler
        scheduler scheduler_

        // Handlers
        h g h_ g_

        // Pending instances
        pending_h pending_g pending_h_ pending_g_

        m1 m2 dh_out dg_out
    }
    transitions {
        dh dg ht hf gt gf
        dh_ dg_ ht_ hf_ gt_ gf_
        switch
    }
    arcs {
        // Dispatch h
        { scheduler, pending_h, scheduler_, pending_h_, m1 } -> dh -> { h, h_, m1 }
        { scheduler_, pending_h_, m2 } -> dh_ -> { h_, m2, dh_out }

        // Dispatch g
        { scheduler, pending_g, scheduler_, pending_g_, m1 } -> dg -> { g, g_, m1 }
        { scheduler_, pending_g_, m2 } -> dg_ -> { g_, m2, dg_out }

        // Exit h if x == true
        { h, x, h_, x_, m1 } -> ht -> { x, pending_h, pending_g, scheduler, x_, pending_h_, pending_g_, scheduler_, m1 }
        { h_, x_, m2 } -> ht_ -> { x_, pending_h_, pending_g_, scheduler_, m2 }

        // Exit h if x == false
        { h, not_x, h_, not_x_, m1 } -> hf -> { not_x, scheduler, not_x_, scheduler_, m1 }
        { h_, not_x_, m2 } -> hf_ -> { not_x_, scheduler_, m2 }

        // Exit g if x == true
        { g, x, g_, x_, m1 } -> gt -> { not_x, scheduler, not_x_, scheduler_, m1 }
        { g_, x_, m2 } -> gt_ -> { not_x_, scheduler_, m2 }

        // Exit g if x == false
        { g, not_x, g_, not_x_, m1 } -> gf -> { not_x, scheduler, not_x_, scheduler_, m1 }
        { g_, not_x_, m2 } -> gf_ -> { not_x_, scheduler_, m2 }

        m1 -> switch -> m2
    }
    initial {
        // Initially, x is true, there's one pending instance of h(),
        // and the scheduler has control.
        x pending_h scheduler
        x_ pending_h_ scheduler_
        m1
    }
}
safety property "terminating" {
    dh_out >= 1 && dg_out >= 1 &&
    x_ >= x && not_x_ >= not_x &&
    scheduler_ >= scheduler &&
    h_ >= h && g_ >= g &&
    pending_h_ >= pending_h && pending_g_ >= pending_g
}

