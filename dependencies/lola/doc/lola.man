.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.45.1.
.TH LOLA "1" "Juni 2014" "LoLA 2.0" "User Commands"
.SH NAME
LoLA \- manual page for LoLA 2.0
.SH SYNOPSIS
.B lola
[\fI\,FILE\/\fR] [\fI\,--formula=FORMULA\/\fR] [\fI\,OPTIONS\/\fR]...
.SH DESCRIPTION
LoLA 2.0
.PP
LoLA: a low\-level analyzer.
.SH "REPORTING BUGS"
Report bugs to <lola@service\-technology.org>.
.br
Visit LoLA's home page at <http://service\-technology.org/lola>.
.PP
.br
About LoLA:
.TP
\fB\-h\fR, \fB\-\-help\fR
.br
Print help and exit
.TP
\fB\-\-detailed\-help\fR
.br
Print help, including all details and hidden
options, and exit
.TP
\fB\-\-full\-help\fR
.br
Print help, including hidden options, and exit
.TP
\fB\-V\fR, \fB\-\-version\fR
.br
Print version and exit
.PP
.br
Verification Problem:
.IP
.br
The verification problem specifies the question that LoLA is supposed to
answer.
.TP
\fB\-c\fR, \fB\-\-check\fR=\fI\,PROPERTY\/\fR
.br
Verify a property  (possible values="none",
"full", "modelchecking"
default=`modelchecking')
.IP
.br
The type of property to be verified by LoLA is selected:
.IP
* modelchecking: A given temporal logic formula (specified using the
.IP
mandatory `\-\-formula' or `\-\-buechi' option) is evaluated while generating
the state space. Search terminates as soon as the value of the formula is
determined.
.IP
* full: All reachable states are computed without evaluating any property.
.IP
.br
This is useful for determining the size of a (reduced) state space.
.IP
* none: No state space search is performed at all. This is useful for just
.IP
getting statistical data for the net and pre\-processing information.
.TP
\fB\-f\fR, \fB\-\-formula\fR=\fI\,FORMULA\/\fR
.br
Check a formula
.IP
.br
If the given string is a formula in one of the temporal logics CTL or LTL,
this formula is verified during state space exploration. Otherwise, if the
given string is a file name, such a formula is expected as content of that
file (requires `\-\-check=modelchecking').
.TP
\fB\-\-buechi\fR=\fI\,AUTOMATON\/\fR
.br
Check a linear time property specified as a
.br
Büchi automaton
.IP
.br
The given string is expected to be a file name that contains the description
of a Büchi automaton. During state space exploration, LoLA searches for a
path that is accepted by that automaton (requires `\-\-check=modelchecking').
.PP
.br
Reduction Techniques:
.IP
.br
LoLA offers several techniques for alleviating the state space explosion
problem. Many of them can be applied in combination.
.TP
\fB\-\-search\fR=\fI\,STRATEGY\/\fR
.br
Search the state space using a particular
strategy  (possible values="depth",
"findpath", "sweepline", "covergraph"
default=`depth')
.IP
.br
The search strategy determines (1) the order in which states are explored,
and (2) whether or not computed states are kept in memory.
.IP
* depth: States are explored using the depth\-first strategy and kept in
.IP
memory forever.
.IP
* findpath: States are explored without storing them at all, i.e. they may
.IP
occur repeatedly on a path; search is not guaranteed to be exhaustive.
.IP
* sweepline: States are explored in ascending progress value order determined
.IP
by a pre\-processed progress measure. They are released from memory as soon
as their progress value is smaller those of than any unprocessed states,
unless the search algorithm has marked them as persistent (for assuring
termination). Search is exhaustive.
.IP
* covergraph: States are explored using the coverability graph constructions,
.IP
i.e. sequences of states are abstracted to their limit. Evaluation of
properties may lead to inconclusive results.
.TP
\fB\-\-stubborn\fR=\fI\,STUBBORN\/\fR
.br
Apply a particular scheme for computing
stubborn sets.  (possible values="tarjan",
"deletion" default=`tarjan')
.IP
.br
If LoLA searches for deadlocks or reduces a temporal logic property to a
simple reachability problem, it always uses the stubborn set method (a
partial order reduction technique). There are several ways to compute
stubborn sets which have different performance.
.IP
* tarjan: Stubborn sets are computed by an incremental method that
.IP
investigates strongly connected components in a dependency graph. It has
linear complexity (in the number of transitions) and leads to superior
performance if a target state (or deadlock) is actually reachable).
.IP
* deletion: Stubborn sets are computed by repeated deletion of transitions.
.IP
.br
It has quadratic complexity (in the number of transitions) but produces
smaller stubborn sets. It has superior performance if no target state (or
deadlock) is actually reachable.
.TP
\fB\-\-cycle\fR
.br
Apply transition invariant based reduction.
(default=off)
.IP
.br
States are computed but only some of them are stored. Stored states are
sufficient to cover at least one state for each cycle in the state space,
thus guaranteeing termination of the search. Information about cycles in the
state space is obtained from transition invariants of the Petri net that are
determined in preprocessing.
.TP
\fB\-\-symmetry\fR
.br
Apply symmetry reduction.  (default=off)
.IP
.br
A generating set for the symmetries of the given net (respecting the given
formula, if applicable) is computed during pre\-processing. During state space
exploration, markings are transformed into (approximated) canonical
representatives of their respective equivalence classes before storing. This
way, only few members of an equivalence class are physically present in the
set of stored markings.
.PP
.br
Input:
.IP
.br
Input can be given in several formats.
.TP
\fB\-\-compressed\fR
.br
Read a compressed file  (default=off)
.IP
.br
In compressed format, net elements are reduced to indices, thus making it
easier to transform an input file into internal data structures. This is
useful for repeated use of the same net, but not at all readable for humans.
.PP
.br
Output:
.IP
.br
Apart from the answer to the verification problem, LoLA can output other
useful information. This information can help in understanding the result
produced by LoLA.
.TP
\fB\-s\fR, \fB\-\-state\fR[=\fI\,FILE\/\fR]
.br
Print witness state  (default=`\-')
.IP
.br
If the verification problem asks for the reachability of a state, and such a
state is indeed reachable, this option forces LoLA to write such a state to
the specified file, or to the standard output stream (\-).
.TP
\fB\-p\fR, \fB\-\-path\fR[=\fI\,FILE\/\fR]
.br
Print witness path  (default=`\-')
.IP
.br
If the verification problem asks for the existence of a path (e.g. to a given
state, or accepted by a Büchi automaton), this option forces LoLA to write
such a path to the specified file, or to the standard output stream (\-).
.TP
\fB\-\-pathshape\fR[=\fI\,SHAPE\/\fR]
.br
Select the shape of the witness path  (possible
values="linear", "run", "fullrun",
"eventstructure" default=`linear')
.IP
.br
If a path is written using the `\-\-path' option, several formats are available
to control the way in which concurrency is expressed, and how much redundant
information is provided.
.IP
* linear: Print all transitions in path in sequential order, i.e. no
.IP
concurrency information is given.
.IP
* fullrun: The path is expressed as a partially ordered run (an unrolling of
.IP
the net) consisting of conditions (places) and events (transitions).
.IP
* run: Same as fullrun, but obvious places and transitions (e.g. plain
.IP
sequences) are suppressed.
.IP
* eventstructure: Same as run, bit places are not reported.
.TP
\fB\-\-writeCompressed\fR[=\fI\,PREFIX\/\fR]
.br
Write a compressed file
.IP
(default=`compressedOutput')
.IP
.br
The net structure is written using indices instead of identifiers. Thus,
subsequent reading is more efficient.
.PP
.br
Logging:
.IP
.br
During search, LoLA generates tons of messages concerning results of
preprocessing, progress information during search, or statistical data.
.TP
\fB\-q\fR, \fB\-\-quiet\fR
.br
Suppress messages.  (default=off)
.IP
.br
In quiet mode, nothing is reported (except of error messages). This option is
in particular useful in combination with the JSON output.
.TP
\fB\-r\fR, \fB\-\-reporter\fR=\fI\,REPORTER\/\fR
.br
Select a reporting procedure.  (possible
values="stream", "socket", "silent"
default=`stream')
.IP
.br
LoLA has different ways to emit log messages.
.IP
* stream: Messages are sent to the standard error stream (stderr) of the
.IP
process that runs LoLA.
.IP
* socket: Messages are sent to a remote process (`listener') via socket
.IP
communication.
.IP
* silent: All messages are suppressed.
.TP
\fB\-j\fR, \fB\-\-json\fR[=\fI\,FILE\/\fR]
.br
Output structured data in JSON format.
(default=`\-')
.IP
.br
Creates structured output in JSON format (JavaScript Object Notation). This
format is designed to be easily consumable by other programs. The used keys
are described in LoLA's manual. The output is written into the specified
file, or by default to the standard output stream (\-).
.TP
\fB\-\-jsoninclude\fR=\fI\,DATA\/\fR
.br
Control which data should be included in the
.br
JSON output.  (possible values="path",
"state")
.IP
.br
This option controls whether additional aspects should be included in the
.br
JSON output.
.TP
\fB\-\-nolog\fR
.br
Do not send logging information  (default=off)
.IP
.br
LoLA sends statistical data to a logging server. This function switches off
logging.
.TP
\fB\-\-outputport\fR=\fI\,PORT\/\fR
.br
Define output port number  (default=`5555')
.IP
.br
This option specifies a port number for outgoing messages. This port is used
to communicate with a listener process which displays LoLA's reports.
.TP
\fB\-\-inputport\fR=\fI\,PORT\/\fR
.br
Define input port number  (default=`5556')
.IP
.br
This option specifies a port number for incoming messages. This port is used
to remotely terminate LoLA in case the option `\-\-remoteTermination' is used.
.TP
\fB\-\-address\fR=\fI\,HOSTNAME\/\fR
.br
Define hostname or IP for reports
(default=`localhost')
.IP
.br
The hostname or IP address of a listener process to which LoLA will send
reports to.
.TP
\fB\-\-remoteTermination\fR[=\fI\,SECRET\/\fR]
.br
Allow remote termination  (default=`goodbye')
.IP
.br
This option installs a termination handler that allows to remotely terminate
.br
LoLA by sending a specified SECRET to the input port.
.SS "Debugging:"
.TP
\fB\-\-printNet\fR
.br
Print the net  (default=off)
.TP
\fB\-\-stats\fR
.br
Print memory statistics  (default=off)
.TP
\fB\-\-tscc\fR
.br
Use TSCC exploration  (default=off)
.PP
.br
Limits:
.IP
.br
To avoid negative effects of physically exceeding the resources of the
machine that runs LoLA, artificial limits can be set that force LoLA to
terminate when exceeded.
.TP
\fB\-\-timelimit\fR=\fI\,SECONDS\/\fR
.br
Abort LoLA after the given time has passed
.IP
.br
LoLA is aborted when the given number of seconds have passed.
.TP
\fB\-\-symmtimelimit\fR=\fI\,SECONDS\/\fR
.br
Abort symmetry computation after the given time
has passed
.IP
.br
When the given time limit is exceeded, LoLA stops exploration of symmetries
and continues with those generators that have been found so far.
.TP
\fB\-\-markinglimit\fR=\fI\,MARKINGS\/\fR
.br
Abort LoLA after the given number of markings
have been explored
.IP
.br
LoLA is aborted as soon as it reports a number of explored markings that is
larger than the specified number.
.PP
.br
Advanced:
.IP
.br
A lot of other aspects of LoLA can be controlled with command line
parameters. A complete list can be shown with `\-\-detailed\-help'.
.TP
\fB\-\-store\fR=\fI\,STORE\/\fR
.br
Manage visited states using the specified data
structure  (possible values="comp",
"prefix", "stl", "bloom"
default=`prefix')
.IP
.br
LoLA supports several structures for managing the stored states:
.IP
* comp: for internal (debugging) use only
* prefix: Store states as a prefix tree
* stl: Store states using the set class in the C++ standard template library
.IP
(STL).
.IP
* bloom: do not store states, but record hash values of visited states. When
.IP
hash collisions occur, search is not exhaustive. The probability of hash
collisions can be reduced by increasing the number of concurrently used
hash functions.
.TP
\fB\-\-encoder\fR=\fI\,ENCODER\/\fR
.br
Code visited states using the specified coding
scheme  (possible values="bit", "copy",
"simplecompressed", "fullcopy"
default=`bit')
.IP
.br
LoLA supports several strategies for transforming a marking into a sequence
of bits to be finally stored. Some schemes represent only significant places.
.br
The marking of insignificant places is fully determined by the significant
ones via place invariants of the Petri net. Information about significance of
places is computed in pre\-processing.
.IP
* bit: Marking of significant places is packed such that each place gets only
.IP
as many bits as necessary according to its capacity.
.IP
* copy: Marking of significant places is transformed using one word per
.IP
place.
.IP
* simplecompressed: Marking of significant places is encoded using a variable
.IP
length coding scheme that assigns small codes to low marking values and
large codes to bigger marking values.
.IP
* fullcopy: Marking of all places is transformed using one word per place.
.TP
\fB\-\-bucketing\fR[=\fI\,BUCKETS\/\fR]
.br
Activate bucketing, if the selected store
supports it.  (default=`16')
.IP
.br
The argument is valid for the sweep\-line method only, should be a power of 2,
and determines the number of buckets per progress value.
.TP
\fB\-\-hashfunctions\fR=\fI\,SHORT\/\fR
.br
Activate the specified number of hash functions
for the Bloom filter  (default=`2')
.IP
.br
Using the `\-\-store=bloom' option, only the hash values of visited states are
recorded. This option controls, for how many (stochastically independent)
hash functions, the hash value is recorded. Increased number reduces the
probability of hash collisions thus getting search closer to exhaustion of
the state space.
.TP
\fB\-\-ltlmode\fR=\fI\,LTLMODE\/\fR
.br
Select LTL\-state storage mode  (possible
values="tree", "flat" default=`tree')
.TP
\fB\-\-sweepfronts\fR=\fI\,FRONTS\/\fR
.br
Number of fronts that may run simultaneously in
the SweepLine method.  (default=`1')
.IP
.br
In addition, a higher number of threads can be selected to sweep through
states inside any single front concurrently.
.TP
\fB\-\-sweeplinedelay\fR=\fI\,PERCENTAGE\/\fR
.br
Parameter for the SweepLine search strategy
.IP
(default=`100')
.IP
.br
Percentage of transitions with negative progress values for which
non\-persistent states are remembered.
.TP
\fB\-\-sweeplinespread\fR=\fI\,MULTIPLIER\/\fR
.br
Allow spreading of progress values over a
.TP
larger range.
(default=`1')
.TP
\fB\-\-cycleheuristic\fR=\fI\,K\/\fR
.br
Heuristical parameter for transition invariant
based analysis.  (default=`\-1')
.TP
\fB\-\-retrylimit\fR=\fI\,RETRIES\/\fR
.br
Set number of retries (0 for infinite retries;
relevant only for `\-\-search=findpath')
(default=`0')
.IP
.br
Using `\-\-search=findpath', randomly selected transitions are fired without
storing states. Occasionally, search resumes at the initial marking (see
`\-\-depthlimit'). After RETRIES resets to the initial marking, LoLA terminates
and assumes that the target state is not reachable (which is not necessarily
the correct result as search is not exhaustive).
.TP
\fB\-\-depthlimit\fR=\fI\,DEPTH\/\fR
.br
Set number of transitions to fire before search
is aborted or retried (relevant for
`\-\-search=findpath').  (default=`1000000')
.IP
.br
Using `\-\-search=findpath', randomly selected transitions are fired without
storing states. When DEPTH is reached, search resumes at the initial marking
thus exploring another path.
.TP
\fB\-\-threads\fR=\fI\,THREADS\/\fR
.br
Set number of threads to be used for
parallelization  (default=`1')
.IP
.br
If the machine running LoLA has several cores, LoLA can parallelize the
access to the stored markings to the given number of threads.
.PP
.br
LoLA: a low\-level analyzer.
.PP
.br
Report bugs to <lola@service\-technology.org>.
.br
Visit LoLA's home page at <http://service\-technology.org/lola>.
.SH "SEE ALSO"
The full documentation for
.B LoLA
is maintained as a Texinfo manual.  If the
.B info
and
.B LoLA
programs are properly installed at your site, the command
.IP
.B info LoLA
.PP
should give you access to the complete manual.
