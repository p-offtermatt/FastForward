/* translation of file(s)
	"Frontend/Parser/formula_abstract.k"
	"Frontend/Parser/formula_rewrite.k"
	"Frontend/Parser/formula_unparse.k"
 */
/* generated by:
 *  @(#)$Author: Kimwitu++ version 2.3.13 (C) 1998-2008 Humboldt-Universitaet zu Berlin $
 */
#ifndef KC_REWRITE_HEADER
#define KC_REWRITE_HEADER

namespace kc { }
using namespace kc;
/* included stuff */
#line 19 "Frontend/Parser/formula_rewrite.k"
/// variable counting the rule applications in the rewrite rule sets
extern size_t rule_applications;

#line  20 "ast-system-rk.h"
/* end included stuff */


namespace kc {

typedef enum {
    base_rview_enum,
    goodbye_doublearrows_enum,
    goodbye_singlearrows_enum,
    goodbye_xor_enum,
    goodbye_fireable_enum,
    goodbye_unfireable_enum,
    goodbye_initial_enum,
    sides_enum,
    productlists_enum,
    leq_enum,
    tautology_enum,
    emptyquantifiers_enum,
    singletemporal_enum,
    simpleneg_enum,
    booleanlists_enum,
    ctloperators_enum,
    rbuechi_enum,
    dnf_enum,
    simpletautology_enum,
    last_rview
} rview_enum;

struct impl_rviews {
    const char *name;
    rview_class *view;
};
extern struct impl_rviews rviews[];
class rview_class {
protected:
    // only used in derivations
    rview_class(rview_enum v): m_view(v) { }
    rview_class(const rview_class&): m_view(base_rview_enum)
	{ /* do not copy m_view */ }
public:
    const char* name() const
	{ return rviews[m_view].name; }
    operator rview_enum() const
	{ return m_view; }
    bool operator==(const rview_class& other) const
	{ return m_view == other.m_view; }
private:
    rview_enum m_view;
};

/* Use rviews instead
extern char *kc_rview_names[];
*/
struct base_rview_class: rview_class {
    base_rview_class():rview_class(base_rview_enum){}
};
extern base_rview_class base_rview;
struct goodbye_doublearrows_class: rview_class {
    goodbye_doublearrows_class():rview_class(goodbye_doublearrows_enum){}
};
extern goodbye_doublearrows_class goodbye_doublearrows;
struct goodbye_singlearrows_class: rview_class {
    goodbye_singlearrows_class():rview_class(goodbye_singlearrows_enum){}
};
extern goodbye_singlearrows_class goodbye_singlearrows;
struct goodbye_xor_class: rview_class {
    goodbye_xor_class():rview_class(goodbye_xor_enum){}
};
extern goodbye_xor_class goodbye_xor;
struct goodbye_fireable_class: rview_class {
    goodbye_fireable_class():rview_class(goodbye_fireable_enum){}
};
extern goodbye_fireable_class goodbye_fireable;
struct goodbye_unfireable_class: rview_class {
    goodbye_unfireable_class():rview_class(goodbye_unfireable_enum){}
};
extern goodbye_unfireable_class goodbye_unfireable;
struct goodbye_initial_class: rview_class {
    goodbye_initial_class():rview_class(goodbye_initial_enum){}
};
extern goodbye_initial_class goodbye_initial;
struct sides_class: rview_class {
    sides_class():rview_class(sides_enum){}
};
extern sides_class sides;
struct productlists_class: rview_class {
    productlists_class():rview_class(productlists_enum){}
};
extern productlists_class productlists;
struct leq_class: rview_class {
    leq_class():rview_class(leq_enum){}
};
extern leq_class leq;
struct tautology_class: rview_class {
    tautology_class():rview_class(tautology_enum){}
};
extern tautology_class tautology;
struct emptyquantifiers_class: rview_class {
    emptyquantifiers_class():rview_class(emptyquantifiers_enum){}
};
extern emptyquantifiers_class emptyquantifiers;
struct singletemporal_class: rview_class {
    singletemporal_class():rview_class(singletemporal_enum){}
};
extern singletemporal_class singletemporal;
struct simpleneg_class: rview_class {
    simpleneg_class():rview_class(simpleneg_enum){}
};
extern simpleneg_class simpleneg;
struct booleanlists_class: rview_class {
    booleanlists_class():rview_class(booleanlists_enum){}
};
extern booleanlists_class booleanlists;
struct ctloperators_class: rview_class {
    ctloperators_class():rview_class(ctloperators_enum){}
};
extern ctloperators_class ctloperators;
struct rbuechi_class: rview_class {
    rbuechi_class():rview_class(rbuechi_enum){}
};
extern rbuechi_class rbuechi;
struct dnf_class: rview_class {
    dnf_class():rview_class(dnf_enum){}
};
extern dnf_class dnf;
struct simpletautology_class: rview_class {
    simpletautology_class():rview_class(simpletautology_enum){}
};
extern simpletautology_class simpletautology;

} // namespace kc
#endif // KC_REWRITE_HEADER
